# -*- coding: utf-8 -*-
"""KMeans.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WZF71kb66kizncOxxjDWzBiBvzPvZ-fz
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.cluster import KMeans
import plotly.express as px
from plotly.subplots import make_subplots
import plotly.graph_objs as go

"""Loading data to Pandas Dataframe"""

cust_data = pd.read_csv("/content/Mall_Customers.csv")

#Initial set of 5 rows in the dataframe

cust_data.head()

#Information about the dataset
cust_data.info()

#Listing the number of Columns-
cols = cust_data.columns.tolist()
cols

#Representing data in graphs on basis of these columns-
fig = make_subplots(rows=4, cols=1, 
                    subplot_titles=tuple(cols[1:]))

for row in range(1,5):
    
    fig.append_trace(go.Histogram(x=cust_data[cols[row]]),
              row=row, col=1)

fig.update_layout(height=1000,showlegend=False)
fig.show()



"""Considering Annual Income and Spending Score only

"""

x = cust_data.iloc[:,[3,4]].values

print(x)

"""Choosing the number of clusters using Within Cluster Sum of Squares (WCSS)

"""

#Finding WCSS value for different number of clusters:

wcss = [] #empty_list

for i in range(1,11):
  kmeans= KMeans (n_clusters=i, init= 'k-means++',random_state=5 )
  kmeans.fit(x)
  wcss.append(kmeans.inertia_)

#plotting an elbow graph for finding min. number of clusters
  sns.set()
  plt.plot(range(1,11),wcss)
  plt.title('ELBOW POINT GRAPH')
  plt.xlabel('NUMBER OF CLUSTERS')
  plt.ylabel('WCSS')
  plt.show()

"""OPTIMUM NUMBER OF CLUSTERS- 5"""

kmeans= KMeans(n_clusters=5, init = 'k-means++',random_state=0)

y = kmeans.fit_predict(x)

print(y)

"""VISUALISING ALL THE CLUSTERS:"""

#plotting all the clusters along with their Centroids:

plt.figure(figsize=(10,10))
plt.scatter(x[y==0,0],x[y==0,1],s=50, c='lightgreen',edgecolor='black',  label='cluster 1')
plt.scatter(x[y==1,0],x[y==1,1],s=50, c='pink',edgecolor='black', label='cluster 2')
plt.scatter(x[y==2,0],x[y==2,1],s=50, c='yellow',edgecolor='black', label='cluster 3')
plt.scatter(x[y==3,0],x[y==3,1],s=50, c='blue',edgecolor='black', label='cluster 4')
plt.scatter(x[y==4,0],x[y==4,1],s=50, c='cyan',edgecolor='black',  label='cluster 5')

plt.scatter(kmeans.cluster_centers_[:,0],kmeans.cluster_centers_[:,1],s=100,c='red', label='centroids')
plt.title('Clusters of Customers (KMeans Clustering Model)')
plt.xlabel('Annual Income(k$)')
plt.ylabel('Spending Score (1-100)')
plt.legend()
plt.grid()
plt.show()

"""RELATIONSHIP B/W SPENDING SCORE AND FREQUENCY OF VISITS IN LAST 12 MONTHS"""

customer_data_new = pd.read_excel('/content/Ramit_MALL_DATA_NEW.xlsx')

customer_data_new.head()

customer_data_new.info()

a = customer_data_new.iloc[:,[4,5]].values

print(a)

wcss = [] #empty_list

for i in range(1,11):
  kmeans= KMeans(n_clusters=i, init= 'k-means++',random_state=5 )
  kmeans.fit(a)
  wcss.append(kmeans.inertia_)

print(a.shape)

sns.set()
  plt.plot(range(1,11),wcss)
  plt.title('ELBOW POINT GRAPH-2')
  plt.xlabel('NUMBER OF CLUSTERS')
  plt.ylabel('WCSS')
  plt.show()

"""OPTIMUM NUMBER OF CLUSTERS = 3"""

kmeans= KMeans(n_clusters=3, init = 'k-means++',random_state=0)

b = kmeans.fit_predict(a)

print(b)

plt.figure(figsize=(10,10))
plt.scatter(x[y==0,0],x[y==0,1],s=50, c='lightgreen',edgecolor='black',  label='cluster 1')
plt.scatter(x[y==1,0],x[y==1,1],s=50, c='pink',edgecolor='black', label='cluster 2')
plt.scatter(x[y==2,0],x[y==2,1],s=50, c='yellow',edgecolor='black', label='cluster 3')

plt.scatter(kmeans.cluster_centers_[:,0],kmeans.cluster_centers_[:,1],s=100,c='red', label='centroids')
plt.title('Clusters of Customers (KMeans Clustering Model)')
plt.xlabel('Spending Score (1-100)')
plt.ylabel('Frequency of visit in last 12months')
plt.legend()
plt.grid()
plt.show()